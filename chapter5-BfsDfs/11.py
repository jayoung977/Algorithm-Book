from collections import deque

# BFS: 작음, 최단경로
# DFS: 큼, 모든 노드 방문해야할 때

# 입력
# 5 6
# 101010
# 111111
# 000001
# 111111
# 111111

# N, M을 공백을 기준으로 구분하여 입력 받기
n, m = map(int, input().split())  # 5 6

# 2차원 리스트의 맵 정보 입력 받기
graph = []
for i in range(n):
    graph.append(list(map(int, input())))

# [[1, 0, 1, 0, 1, 0],
#  [1, 1, 1, 1, 1, 1],
#  [0, 0, 0, 0, 0, 1],
#  [1, 1, 1, 1, 1, 1],
#  [1, 1, 1, 1, 1, 1]]


# 이동할 네 가지 방향 정의 (상, 하, 좌, 우)
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

# BFS 소스코드 구현


def bfs(x, y):
    # 큐(Queue) 구현을 위해 deque 라이브러리 사용
    queue = deque()
    queue.append((x, y))

    # 큐가 빌 때까지 반복하기
    while queue:
        x, y = queue.popleft()
        # print('x, y', x, y)
        # print('queue', queue)
        # 현재 위치에서 4가지 방향으로의 위치 확인
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            # 미로 찾기 공간을 벗어난 경우 무시
            if nx < 0 or nx >= n or ny < 0 or ny >= m:
                continue
            # 벽인 경우 무시
            if graph[nx][ny] == 0:
                continue
            # 해당 노드를 처음 방문하는 경우에만 최단 거리 기록
            if graph[nx][ny] == 1:
                print('nx, ny ', nx, ny)
                graph[nx][ny] = graph[x][y] + 1
                queue.append((nx, ny))
                # print('graph')
                # for l in graph:
                #     print(l)

    # 가장 오른쪽 아래까지의 최단 거리 반환
    return graph[n - 1][m - 1]


# BFS를 수행한 결과 출력
print(bfs(0, 0))


'''

5 6
101010
111111
000001
111111
111111
x, y 0 0
queue deque([])
nx, ny  1 0
graph
[1, 0, 1, 0, 1, 0]
[2, 1, 1, 1, 1, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 1 0
queue deque([])
nx, ny  0 0
graph
[3, 0, 1, 0, 1, 0]
[2, 1, 1, 1, 1, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
nx, ny  1 1
graph
[3, 0, 1, 0, 1, 0]
[2, 3, 1, 1, 1, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 0 0
queue deque([(1, 1)])
x, y 1 1
queue deque([])
nx, ny  1 2
graph
[3, 0, 1, 0, 1, 0]
[2, 3, 4, 1, 1, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 1 2
queue deque([])
nx, ny  0 2
graph
[3, 0, 5, 0, 1, 0]
[2, 3, 4, 1, 1, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
nx, ny  1 3
graph
[3, 0, 5, 0, 1, 0]
[2, 3, 4, 5, 1, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 0 2
queue deque([(1, 3)])
x, y 1 3
queue deque([])
nx, ny  1 4
graph
[3, 0, 5, 0, 1, 0]
[2, 3, 4, 5, 6, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 1 4
queue deque([])
nx, ny  0 4
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 1]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
nx, ny  1 5
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 1]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 0 4
queue deque([(1, 5)])
x, y 1 5
queue deque([])
nx, ny  2 5
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 1, 1, 1]
[1, 1, 1, 1, 1, 1]
x, y 2 5
queue deque([])
nx, ny  3 5
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 1, 1, 9]
[1, 1, 1, 1, 1, 1]
x, y 3 5
queue deque([])
nx, ny  4 5
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 1, 1, 9]
[1, 1, 1, 1, 1, 10]
nx, ny  3 4
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 1, 10, 9]
[1, 1, 1, 1, 1, 10]
x, y 4 5
queue deque([(3, 4)])
nx, ny  4 4
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 1, 10, 9]
[1, 1, 1, 1, 11, 10]
x, y 3 4
queue deque([(4, 4)])
nx, ny  3 3
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 11, 10, 9]
[1, 1, 1, 1, 11, 10]
x, y 4 4
queue deque([(3, 3)])
nx, ny  4 3
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 1, 11, 10, 9]
[1, 1, 1, 12, 11, 10]
x, y 3 3
queue deque([(4, 3)])
nx, ny  3 2
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 12, 11, 10, 9]
[1, 1, 1, 12, 11, 10]
x, y 4 3
queue deque([(3, 2)])
nx, ny  4 2
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 1, 12, 11, 10, 9]
[1, 1, 13, 12, 11, 10]
x, y 3 2
queue deque([(4, 2)])
nx, ny  3 1
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 13, 12, 11, 10, 9]
[1, 1, 13, 12, 11, 10]
x, y 4 2
queue deque([(3, 1)])
nx, ny  4 1
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[1, 13, 12, 11, 10, 9]
[1, 14, 13, 12, 11, 10]
x, y 3 1
queue deque([(4, 1)])
nx, ny  3 0
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[14, 13, 12, 11, 10, 9]
[1, 14, 13, 12, 11, 10]
x, y 4 1
queue deque([(3, 0)])
nx, ny  4 0
graph
[3, 0, 5, 0, 7, 0]
[2, 3, 4, 5, 6, 7]
[0, 0, 0, 0, 0, 8]
[14, 13, 12, 11, 10, 9]
[15, 14, 13, 12, 11, 10]
x, y 3 0
queue deque([(4, 0)])
x, y 4 0
queue deque([])
10
'''
