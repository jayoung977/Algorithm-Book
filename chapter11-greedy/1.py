## 01 모험가 길드

# 문제 : 한 마을에 모험가 N명이 있을 때 각 모험가의 공포도를 측정했다.
# 공포도 X인 모험가는 반드시 X명 이상의 그룹에 참여해야 여행을 떠날 수 있다.
# 여행을 떠날 수 있는 그룹의 최댓값을 구하는 프로그램을 작성해라
# 예를 들어 N=5 (5명의 모험가)이고, 각 모험도가 아래의 입력예시와 같을 때 
# 총 2개의 그룹을 만들 수 있다. 
# 다만, 몇명의 모험가는 마을에 그대로 남을 수 있어서 
# 모든 모험가를 특정한 그룹에 넣지 않아도 된다.





n = int(input())   #모험가 수 n
li = list(map(int,input().split())) #각 모험가 공포도를 리스트로 만듦
# 출력 >> [2, 3, 1, 2, 2]
li.sort()
# 공포도가 작은 순으로 정렬
# 출력 >> [1, 2, 2, 2, 3]
li_copy = li.copy()
# 리스트 카피 -> 반복문 돌면서 그룹에 포함된 모험가 삭제 예정

cnt = 0 #최대 그룹 수를 카운트할 변수 cnt

for num in li: # 리스트 내 순서대로 공포도 꺼냄
    # 만약 리스트 카피 내의 공포도(num)의 수가 같거나 클 경우
    if li_copy.count(num) >= num: 
        cnt +=1  # 최대 그룹수 +1
        for j in range(0,num):
            li_copy.remove(num) #공포도 만큼 카피리스트 내 모험가 제거    
    else: #만약 카피 배열에서 공포도만큼 모험가 없을 경우 중단
        break
print(cnt) #최대 그룹수 출력